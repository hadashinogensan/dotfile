# 色を使用出来るようにする
autoload colors
colors

# 色の設定
export TERM=xterm-256color

# ctrl+wで､直前の/までを削除する｡
export WORDCHARS="*?_-.[]~=&;!#$%^(){}<>"

# ヒストリーの設定
export HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=100000
# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups
# ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_save_nodups
# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space
# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# 日本語ファイル名を表示可能にする
setopt print_eight_bit
# beep を無効にする
setopt no_beep
# ディレクトリ名だけでcdする
setopt auto_cd
# cd したら自動的にpushdする
setopt auto_pushd
# 重複したディレクトリを追加しない
setopt pushd_ignore_dups
# push, popd したときにdirsを表示しないようにする
setopt pushd_silent
# = の後はパス名として補完する
setopt magic_equal_subst
# 補完候補が複数あるときに自動的に一覧表示する
setopt auto_menu
# 高機能なワイルドカード展開を使用する
setopt extended_glob
# 右側まで入力がきたら時間表示を消す
setopt transient_rprompt
# ディレクトリ名の補完で末尾に/を付加する
setopt auto_param_slash
# ドットなしでドットファイルの補完を行う
setopt globdots
# #の後をコメントとして扱う
setopt interactive_comments

#cdを打ったら自動的にlsを打ってくれる関数
function chpwd(){ ls -GF; }

# VCSの情報を取得するzshの便利関数 vcs_infoを使う
autoload -Uz vcs_info

# 表示フォーマットの指定
# %b ブランチ情報
# %a アクション名(mergeなど)
zstyle ':vcs_info:*' formats '[%b]'
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () {
  psvar=()
  LANG=en_US.UTF-8 vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

# プロンプト
PROMPT="[%*] [%~/]
%{${fg[cyan]}%}%n@%m $ %{${reset_color}%}"
RPROMPT="%{${fg[cyan]}%}%1(v|%1v|)%{${reset_color}%}"

# コマンドラインスタック
show_buffer_stack() {
  POSTDISPLAY="
  stack: $LBUFFER"
  zle push-line-or-edit
}
zle -N show_buffer_stack

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..
# 補完にもLS_COLORS の設定を反映する
if [ -n "$LS_COLORS" ]; then
  zstyle ':completion:*' list-colors ${(s.:.)ls_colors}
fi
# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                   /usr/sbin /usr/bin /sbin /bin /usr/x11r6/bin
# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'

# =============================================================
# ^rを拡張
# =============================================================
if [ `which peco` ]; then
  function peco-select-history() {
      local tac
      if which tac > /dev/null; then
          tac="tac"
      else
          tac="tail -r"
      fi
      BUFFER=$(history -n 1 | \
          eval $tac | \
          peco --query "$LBUFFER")
      CURSOR=$#BUFFER
  }
  zle -N peco-select-history

  bindkey '^r' peco-select-history
fi
